// lambda calculus

?start: exprft

?exprtt: atomt
       | paren{call}

?exprtf: atomf
       | paren{call}

?exprft: atomt
       | call

?exprff: atomf
       | call

?atomt: _lambda
      | paren{exprft}
      | IDENT -> var

?atomf: paren{_lambda}
      | paren{exprft}
      | IDENT -> var

_lambda: ("Î»" | "\\") lambda

call: exprff exprtt

lambda: IDENT lambda
      | IDENT "." exprft

paren{e}: "(" e ")"

IDENT: CNAME

%import common.CNAME
%import common.WS

%ignore WS
